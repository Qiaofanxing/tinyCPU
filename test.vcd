$date
	Tue Jun 22 11:56:25 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test $end
$var wire 1 ! wr_ $end
$var wire 24 " rom_out [23:0] $end
$var wire 8 # rom_addr [7:0] $end
$var wire 1 $ rd_ $end
$var wire 8 % ram_out [7:0] $end
$var wire 8 & ram_in [7:0] $end
$var wire 8 ' ram_addr [7:0] $end
$var reg 1 ( clk $end
$var reg 1 ) rst_ $end
$var integer 32 * i [31:0] $end
$scope module cpu $end
$var wire 1 ( clk $end
$var wire 1 ) rst_ $end
$var wire 8 + valM [7:0] $end
$var wire 3 , val_rB [2:0] $end
$var wire 3 - val_rA [2:0] $end
$var wire 8 . valP [7:0] $end
$var wire 8 / valE [7:0] $end
$var wire 8 0 valC [7:0] $end
$var wire 8 1 valB [7:0] $end
$var wire 8 2 valA [7:0] $end
$var wire 24 3 rom_data [23:0] $end
$var wire 8 4 rom_addr [7:0] $end
$var wire 1 ! ram_wr_ $end
$var wire 8 5 ram_wdat [7:0] $end
$var wire 8 6 ram_rdat [7:0] $end
$var wire 1 $ ram_rd_ $end
$var wire 8 7 ram_addr [7:0] $end
$var wire 8 8 new_pc [7:0] $end
$var wire 3 9 dstM [2:0] $end
$var wire 3 : dstE [2:0] $end
$var wire 2 ; cc [1:0] $end
$var wire 8 < aluB [7:0] $end
$var wire 8 = aluA [7:0] $end
$scope module alu $end
$var wire 8 > A [7:0] $end
$var wire 8 ? B [7:0] $end
$var wire 4 @ op [3:0] $end
$var wire 2 A cc [1:0] $end
$var wire 8 B E [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ( clk $end
$var wire 8 C new_pc [7:0] $end
$var wire 1 ) rst_ $end
$var reg 8 D pc [7:0] $end
$upscope $end
$scope module regfile $end
$var wire 8 E E [7:0] $end
$var wire 8 F M [7:0] $end
$var wire 1 ( clk $end
$var wire 3 G dstE [2:0] $end
$var wire 3 H dstM [2:0] $end
$var wire 3 I srcA [2:0] $end
$var wire 3 J srcB [2:0] $end
$var wire 8 K B [7:0] $end
$var wire 8 L A [7:0] $end
$upscope $end
$upscope $end
$scope module ram $end
$var wire 8 M addr [7:0] $end
$var wire 1 ( clk $end
$var wire 8 N in [7:0] $end
$var wire 1 $ rd_ $end
$var wire 1 ! wr_ $end
$var wire 8 O out [7:0] $end
$upscope $end
$scope module rom $end
$var wire 8 P addr [7:0] $end
$var wire 24 Q out [23:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000000 Q
b0 P
bx O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
bx F
b0 E
b0 D
b1 C
b0 B
b10 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b10 ;
b0 :
b0 9
b1 8
b0 7
bx 6
b0 5
b0 4
b1000000 3
b0 2
b0 1
b1000000 0
b0 /
b1 .
b0 -
b0 ,
bx +
bx *
0)
1(
b0 '
b0 &
bx %
1$
b0 #
b1000000 "
1!
$end
#5
b1000 *
0(
#10
1(
#15
b1000 *
0(
1)
#20
b100 '
b100 7
b100 M
b100 /
b100 B
b100 E
b1 ;
b1 A
b100 =
b100 >
b100 2
b100 L
b100 -
b100 I
b110011 0
b10 8
b10 C
b100000000110011 "
b100000000110011 3
b100000000110011 Q
b10 .
b1 #
b1 4
b1 D
b1 P
1(
#25
b1000 *
0(
#30
b100 '
b100 7
b100 M
b11 &
b11 5
b11 N
b11 =
b11 >
b100 /
b100 B
b100 E
b11 2
b11 L
b11 :
b11 G
b1 <
b1 ?
b11 1
b11 K
b11 -
b11 I
b11 ,
b11 J
b1 0
b101 8
b101 C
b10000000011001100000001 "
b10000000011001100000001 3
b10000000011001100000001 Q
b101 .
b10 #
b10 4
b10 D
b10 P
1(
#35
b1000 *
0(
#40
0!
b11111110 '
b11111110 7
b11111110 M
b111 :
b111 G
b0 -
b0 I
b1 ;
b1 A
b1 <
b1 ?
b111 &
b111 5
b111 N
b11111110 /
b11111110 B
b11111110 E
b111 ,
b111 J
b111 0
b111 8
b111 C
b11111111 =
b11111111 >
b1 @
b0 2
b0 L
b11111111 1
b11111111 K
b100000010000011100000000 "
b100000010000011100000000 3
b100000010000011100000000 Q
b111 .
b101 #
b101 4
b101 D
b101 P
1(
#45
b1000 *
0(
#50
b0 :
b0 G
b0 <
b0 ?
b11111110 2
b11111110 L
1!
b11111110 '
b11111110 7
b11111110 M
b0 ,
b0 J
b111 -
b111 I
b1000 8
b1000 C
b11111110 /
b11111110 B
b11111110 E
b0 0
b0 &
b0 5
b0 N
b11111110 =
b11111110 >
b0 @
b0 1
b0 K
b1111000000000000 "
b1111000000000000 3
b1111000000000000 Q
b1000 .
b111 #
b111 4
b111 D
b111 P
1(
#55
b1000 *
0(
#60
b0 '
b0 7
b0 M
b0 /
b0 B
b0 E
b10 ;
b10 A
b0 =
b0 >
b0 2
b0 L
b0 -
b0 I
b1000 8
b1000 C
b111100000000000000000000 "
b111100000000000000000000 3
b111100000000000000000000 Q
b1000 .
b1000 #
b1000 4
b1000 D
b1000 P
1(
#65
0(
#70
1(
#75
0(
#76
